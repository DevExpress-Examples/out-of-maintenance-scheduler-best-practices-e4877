'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace SchdulerBestPracticesMvc.Models


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CarsXtraScheduling")> _
	Partial Public Class SchedulingDataClassesDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertCar(ByVal instance As Car)
	End Sub
	Partial Private Sub UpdateCar(ByVal instance As Car)
	End Sub
	Partial Private Sub DeleteCar(ByVal instance As Car)
	End Sub
	Partial Private Sub InsertCarScheduling(ByVal instance As CarScheduling)
	End Sub
	Partial Private Sub UpdateCarScheduling(ByVal instance As CarScheduling)
	End Sub
	Partial Private Sub DeleteCarScheduling(ByVal instance As CarScheduling)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("CarsXtraSchedulingConnectionString").ConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Cars() As System.Data.Linq.Table(Of Car)
			Get
				Return Me.GetTable(Of Car)()
			End Get
		End Property

		Public ReadOnly Property CarSchedulings() As System.Data.Linq.Table(Of CarScheduling)
			Get
				Return Me.GetTable(Of CarScheduling)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cars")> _
	Partial Public Class Car
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ID As Integer

		Private _Trademark As String

		Private _Model As String

		Private _HP? As Short

		Private _Liter? As Double

		Private _Cyl? As Short

		Private _TransmissSpeedCount? As Short

		Private _TransmissAutomatic As String

		Private _MPG_City? As Short

		Private _MPG_Highway? As Short

		Private _Category As String

		Private _Description As String

		Private _Hyperlink As String

		Private _Picture As System.Data.Linq.Binary

		Private _Price? As Decimal

		Private _RtfContent As String

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnIDChanged()
	End Sub
	Partial Private Sub OnTrademarkChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTrademarkChanged()
	End Sub
	Partial Private Sub OnModelChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnModelChanged()
	End Sub
	Partial Private Sub OnHPChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnHPChanged()
	End Sub
	Partial Private Sub OnLiterChanging(ByVal value? As Double)
	End Sub
	Partial Private Sub OnLiterChanged()
	End Sub
	Partial Private Sub OnCylChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnCylChanged()
	End Sub
	Partial Private Sub OnTransmissSpeedCountChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnTransmissSpeedCountChanged()
	End Sub
	Partial Private Sub OnTransmissAutomaticChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTransmissAutomaticChanged()
	End Sub
	Partial Private Sub OnMPG_CityChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnMPG_CityChanged()
	End Sub
	Partial Private Sub OnMPG_HighwayChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnMPG_HighwayChanged()
	End Sub
	Partial Private Sub OnCategoryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnHyperlinkChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnHyperlinkChanged()
	End Sub
	Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPictureChanged()
	End Sub
	Partial Private Sub OnPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnPriceChanged()
	End Sub
	Partial Private Sub OnRtfContentChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRtfContentChanged()
	End Sub
	#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set(ByVal value As Integer)
				If (Me._ID <> value) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging()
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Trademark", DbType:="NVarChar(50)")> _
		Public Property Trademark() As String
			Get
				Return Me._Trademark
			End Get
			Set(ByVal value As String)
				If (Me._Trademark <> value) Then
					Me.OnTrademarkChanging(value)
					Me.SendPropertyChanging()
					Me._Trademark = value
					Me.SendPropertyChanged("Trademark")
					Me.OnTrademarkChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model", DbType:="NVarChar(50)")> _
		Public Property Model() As String
			Get
				Return Me._Model
			End Get
			Set(ByVal value As String)
				If (Me._Model <> value) Then
					Me.OnModelChanging(value)
					Me.SendPropertyChanging()
					Me._Model = value
					Me.SendPropertyChanged("Model")
					Me.OnModelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HP", DbType:="SmallInt")> _
		Public Property HP() As Short?
			Get
				Return Me._HP
			End Get
			Set(ByVal value? As Short)
				If (Not Me._HP.Equals(value)) Then
					Me.OnHPChanging(value)
					Me.SendPropertyChanging()
					Me._HP = value
					Me.SendPropertyChanged("HP")
					Me.OnHPChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Liter", DbType:="Float")> _
		Public Property Liter() As Double?
			Get
				Return Me._Liter
			End Get
			Set(ByVal value? As Double)
				If (Not Me._Liter.Equals(value)) Then
					Me.OnLiterChanging(value)
					Me.SendPropertyChanging()
					Me._Liter = value
					Me.SendPropertyChanged("Liter")
					Me.OnLiterChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cyl", DbType:="SmallInt")> _
		Public Property Cyl() As Short?
			Get
				Return Me._Cyl
			End Get
			Set(ByVal value? As Short)
				If (Not Me._Cyl.Equals(value)) Then
					Me.OnCylChanging(value)
					Me.SendPropertyChanging()
					Me._Cyl = value
					Me.SendPropertyChanged("Cyl")
					Me.OnCylChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransmissSpeedCount", DbType:="SmallInt")> _
		Public Property TransmissSpeedCount() As Short?
			Get
				Return Me._TransmissSpeedCount
			End Get
			Set(ByVal value? As Short)
				If (Not Me._TransmissSpeedCount.Equals(value)) Then
					Me.OnTransmissSpeedCountChanging(value)
					Me.SendPropertyChanging()
					Me._TransmissSpeedCount = value
					Me.SendPropertyChanged("TransmissSpeedCount")
					Me.OnTransmissSpeedCountChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransmissAutomatic", DbType:="NVarChar(3)")> _
		Public Property TransmissAutomatic() As String
			Get
				Return Me._TransmissAutomatic
			End Get
			Set(ByVal value As String)
				If (Me._TransmissAutomatic <> value) Then
					Me.OnTransmissAutomaticChanging(value)
					Me.SendPropertyChanging()
					Me._TransmissAutomatic = value
					Me.SendPropertyChanged("TransmissAutomatic")
					Me.OnTransmissAutomaticChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MPG_City", DbType:="SmallInt")> _
		Public Property MPG_City() As Short?
			Get
				Return Me._MPG_City
			End Get
			Set(ByVal value? As Short)
				If (Not Me._MPG_City.Equals(value)) Then
					Me.OnMPG_CityChanging(value)
					Me.SendPropertyChanging()
					Me._MPG_City = value
					Me.SendPropertyChanged("MPG_City")
					Me.OnMPG_CityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MPG_Highway", DbType:="SmallInt")> _
		Public Property MPG_Highway() As Short?
			Get
				Return Me._MPG_Highway
			End Get
			Set(ByVal value? As Short)
				If (Not Me._MPG_Highway.Equals(value)) Then
					Me.OnMPG_HighwayChanging(value)
					Me.SendPropertyChanging()
					Me._MPG_Highway = value
					Me.SendPropertyChanged("MPG_Highway")
					Me.OnMPG_HighwayChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="NVarChar(7)")> _
		Public Property Category() As String
			Get
				Return Me._Category
			End Get
			Set(ByVal value As String)
				If (Me._Category <> value) Then
					Me.OnCategoryChanging(value)
					Me.SendPropertyChanging()
					Me._Category = value
					Me.SendPropertyChanged("Category")
					Me.OnCategoryChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hyperlink", DbType:="NVarChar(50)")> _
		Public Property Hyperlink() As String
			Get
				Return Me._Hyperlink
			End Get
			Set(ByVal value As String)
				If (Me._Hyperlink <> value) Then
					Me.OnHyperlinkChanging(value)
					Me.SendPropertyChanging()
					Me._Hyperlink = value
					Me.SendPropertyChanged("Hyperlink")
					Me.OnHyperlinkChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me.OnPictureChanging(value)
					Me.SendPropertyChanging()
					Me._Picture = value
					Me.SendPropertyChanged("Picture")
					Me.OnPictureChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Money")> _
		Public Property Price() As Decimal?
			Get
				Return Me._Price
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Price.Equals(value)) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging()
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RtfContent", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property RtfContent() As String
			Get
				Return Me._RtfContent
			End Get
			Set(ByVal value As String)
				If (Me._RtfContent <> value) Then
					Me.OnRtfContentChanging(value)
					Me.SendPropertyChanging()
					Me._RtfContent = value
					Me.SendPropertyChanged("RtfContent")
					Me.OnRtfContentChanged()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CarScheduling")> _
	Partial Public Class CarScheduling
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ID As Integer

		Private _CarId As String

		Private _UserId? As Integer

		Private _Status? As Integer

		Private _Subject As String

		Private _Description As String

		Private _Label? As Integer

		Private _StartTime? As System.DateTime

		Private _EndTime? As System.DateTime

		Private _Location As String

		Private _AllDay As Boolean

		Private _EventType? As Integer

		Private _RecurrenceInfo As String

		Private _ReminderInfo As String

		Private _Price? As Decimal

		Private _ContactInfo As String

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnIDChanged()
	End Sub
	Partial Private Sub OnCarIdChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCarIdChanged()
	End Sub
	Partial Private Sub OnUserIdChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnUserIdChanged()
	End Sub
	Partial Private Sub OnStatusChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnStatusChanged()
	End Sub
	Partial Private Sub OnSubjectChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSubjectChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnLabelChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnLabelChanged()
	End Sub
	Partial Private Sub OnStartTimeChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnStartTimeChanged()
	End Sub
	Partial Private Sub OnEndTimeChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnEndTimeChanged()
	End Sub
	Partial Private Sub OnLocationChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLocationChanged()
	End Sub
	Partial Private Sub OnAllDayChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnAllDayChanged()
	End Sub
	Partial Private Sub OnEventTypeChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnEventTypeChanged()
	End Sub
	Partial Private Sub OnRecurrenceInfoChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRecurrenceInfoChanged()
	End Sub
	Partial Private Sub OnReminderInfoChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnReminderInfoChanged()
	End Sub
	Partial Private Sub OnPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnPriceChanged()
	End Sub
	Partial Private Sub OnContactInfoChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactInfoChanged()
	End Sub
	#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set(ByVal value As Integer)
				If (Me._ID <> value) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging()
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarId", DbType:="NVarChar(MAX)")> _
		Public Property CarId() As String
			Get
				Return Me._CarId
			End Get
			Set(ByVal value As String)
				If (Me._CarId <> value) Then
					Me.OnCarIdChanging(value)
					Me.SendPropertyChanging()
					Me._CarId = value
					Me.SendPropertyChanged("CarId")
					Me.OnCarIdChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int")> _
		Public Property UserId() As Integer?
			Get
				Return Me._UserId
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._UserId.Equals(value)) Then
					Me.OnUserIdChanging(value)
					Me.SendPropertyChanging()
					Me._UserId = value
					Me.SendPropertyChanged("UserId")
					Me.OnUserIdChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")> _
		Public Property Status() As Integer?
			Get
				Return Me._Status
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._Status.Equals(value)) Then
					Me.OnStatusChanging(value)
					Me.SendPropertyChanging()
					Me._Status = value
					Me.SendPropertyChanged("Status")
					Me.OnStatusChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject", DbType:="NVarChar(50)")> _
		Public Property Subject() As String
			Get
				Return Me._Subject
			End Get
			Set(ByVal value As String)
				If (Me._Subject <> value) Then
					Me.OnSubjectChanging(value)
					Me.SendPropertyChanging()
					Me._Subject = value
					Me.SendPropertyChanged("Subject")
					Me.OnSubjectChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Label", DbType:="Int")> _
		Public Property Label() As Integer?
			Get
				Return Me._Label
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._Label.Equals(value)) Then
					Me.OnLabelChanging(value)
					Me.SendPropertyChanging()
					Me._Label = value
					Me.SendPropertyChanged("Label")
					Me.OnLabelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")> _
		Public Property StartTime() As System.DateTime?
			Get
				Return Me._StartTime
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._StartTime.Equals(value)) Then
					Me.OnStartTimeChanging(value)
					Me.SendPropertyChanging()
					Me._StartTime = value
					Me.SendPropertyChanged("StartTime")
					Me.OnStartTimeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")> _
		Public Property EndTime() As System.DateTime?
			Get
				Return Me._EndTime
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._EndTime.Equals(value)) Then
					Me.OnEndTimeChanging(value)
					Me.SendPropertyChanging()
					Me._EndTime = value
					Me.SendPropertyChanged("EndTime")
					Me.OnEndTimeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(50)")> _
		Public Property Location() As String
			Get
				Return Me._Location
			End Get
			Set(ByVal value As String)
				If (Me._Location <> value) Then
					Me.OnLocationChanging(value)
					Me.SendPropertyChanging()
					Me._Location = value
					Me.SendPropertyChanged("Location")
					Me.OnLocationChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllDay", DbType:="Bit NOT NULL")> _
		Public Property AllDay() As Boolean
			Get
				Return Me._AllDay
			End Get
			Set(ByVal value As Boolean)
				If (Me._AllDay <> value) Then
					Me.OnAllDayChanging(value)
					Me.SendPropertyChanging()
					Me._AllDay = value
					Me.SendPropertyChanged("AllDay")
					Me.OnAllDayChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventType", DbType:="Int")> _
		Public Property EventType() As Integer?
			Get
				Return Me._EventType
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._EventType.Equals(value)) Then
					Me.OnEventTypeChanging(value)
					Me.SendPropertyChanging()
					Me._EventType = value
					Me.SendPropertyChanged("EventType")
					Me.OnEventTypeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecurrenceInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property RecurrenceInfo() As String
			Get
				Return Me._RecurrenceInfo
			End Get
			Set(ByVal value As String)
				If (Me._RecurrenceInfo <> value) Then
					Me.OnRecurrenceInfoChanging(value)
					Me.SendPropertyChanging()
					Me._RecurrenceInfo = value
					Me.SendPropertyChanged("RecurrenceInfo")
					Me.OnRecurrenceInfoChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReminderInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property ReminderInfo() As String
			Get
				Return Me._ReminderInfo
			End Get
			Set(ByVal value As String)
				If (Me._ReminderInfo <> value) Then
					Me.OnReminderInfoChanging(value)
					Me.SendPropertyChanging()
					Me._ReminderInfo = value
					Me.SendPropertyChanged("ReminderInfo")
					Me.OnReminderInfoChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Money")> _
		Public Property Price() As Decimal?
			Get
				Return Me._Price
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Price.Equals(value)) Then
					Me.OnPriceChanging(value)
					Me.SendPropertyChanging()
					Me._Price = value
					Me.SendPropertyChanged("Price")
					Me.OnPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactInfo", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property ContactInfo() As String
			Get
				Return Me._ContactInfo
			End Get
			Set(ByVal value As String)
				If (Me._ContactInfo <> value) Then
					Me.OnContactInfoChanging(value)
					Me.SendPropertyChanging()
					Me._ContactInfo = value
					Me.SendPropertyChanged("ContactInfo")
					Me.OnContactInfoChanged()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
